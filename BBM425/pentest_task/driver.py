import html
import sqlite3
import subprocess
import re

DATABASE = "mock.db"

def xss_function(input1: str):
    return f"<h2>Welcome, {input1}</h2>"

def sql_funtion(input2: str):
    db_generator()
    
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    response = f"<pre>No user found with given credentials: {input2}</pre>"
    cursor.execute(f'''SELECT name, email FROM users WHERE name="{input2}"''')
    rows = cursor.fetchall()
    
    response = table_generator(rows, response)
      
    cursor.close()
    conn.close()
    
    return response

def ping_function(input3: str):
    ping_cmnd = "ping -c 4 " + input3
    
    response = '<pre>'
    try:
        response += subprocess.check_output(ping_cmnd, shell=True, text=True)
    except subprocess.CalledProcessError as e:
        response += e.output
    response += "</pre>"
    
    return response

def xss_safe(input1: str):
    return f"<h2>Welcome, {html.escape(input1)}</h2>"

def sql_safe(input2: str):
    db_generator()
    
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    response = f"<pre>No user found with given credentials: {input2}</pre>"
    cursor.execute(f'''SELECT name, email FROM users WHERE name=?''', (input2, ))
    rows = cursor.fetchall()
    
    response = table_generator(rows, response)
      
    cursor.close()
    conn.close()
    
    return response

def ping_safe(input3: str):
    ping_cmnd = ["ping", "-c", "4", input3]
    
    response = '<pre>'
    try:
        response += subprocess.check_output(ping_cmnd, shell=True, text=True)
    except subprocess.CalledProcessError as e:
        response += e.output
    response += "</pre>"
    
    return response

def ping_safe_regex(input3: str):
    pattern = re.compile("^[A-Za-z0-9.]+$")
    if not pattern.match(input3):
        return f"<pre>Ping request could not find host {input3}. Please check the name and try again.</pre>"
    return ping_function(input3)
    

def db_generator():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    cursor.execute('''SELECT name FROM sqlite_master WHERE type='table' AND name='users' ''')
    table_exists = cursor.fetchone()
    if table_exists:
        cursor.close()
        conn.close()
        return
    
    cursor.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            email TEXT,
            password TEXT
        )
    ''')

    user_data = [
        (1, 'Can Dog', 'can@example.com', 'password1'),
        (2, 'Cansu Dog', 'cansu@example.com', 'password2'),
        (3, 'Ataberk Asar', 'ataberk@example.com', 'password3'),
        (4, 'Haci Ozdemir', 'haci@example.com', 'password4')
    ]
    cursor.executemany('INSERT INTO users (id, name, email, password) VALUES (?, ?, ?, ?)', user_data)
    conn.commit()
    
    cursor.close()
    conn.close()

def table_generator(rows, response):
    if (len(rows) > 0):
        response = "<table>"
        for row in rows:
            response += "<tr>"
            for i in range(len(row)):
                response += f"<td>{row[i]}</td>"
            response += "</tr>"
        response += "</table>"
    
    return response